{"ast":null,"code":"var _jsxFileName = \"D:\\\\ALL projects\\\\Skillazon\\\\skillazon\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_BASE_URL = 'http://localhost:3003/api/auth';\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        console.log('Token found in localStorage, fetching user profile...');\n        await fetchUserProfile();\n      } else {\n        console.log('No token found in localStorage');\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []); // Remove fetchUserProfile dependency to avoid infinite loop\n\n  const fetchUserProfile = async () => {\n    try {\n      const token = localStorage.getItem('accessToken');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      const response = await fetch(`${API_BASE_URL}/profile`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        // Token might be expired, try to refresh\n        await refreshToken();\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        logout();\n        return;\n      }\n      const response = await fetch(`${API_BASE_URL}/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('accessToken', data.accessToken);\n        await fetchUserProfile();\n      } else {\n        logout();\n      }\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      logout();\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('refreshToken', data.refreshToken);\n        setUser(data.user);\n        return {\n          success: true\n        };\n      } else {\n        setError(data.error);\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Network error. Please try again.';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (username, email, password, confirmPassword) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password,\n          confirmPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('refreshToken', data.refreshToken);\n        setUser(data.user);\n        return {\n          success: true\n        };\n      } else {\n        setError(data.error);\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Network error. Please try again.';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        await fetch(`${API_BASE_URL}/logout`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            refreshToken\n          })\n        });\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setError(null);\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      setError(null);\n      const token = localStorage.getItem('accessToken');\n      const response = await fetch(`${API_BASE_URL}/profile`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(profileData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        return {\n          success: true\n        };\n      } else {\n        setError(data.error);\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Network error. Please try again.';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    refreshToken,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","API_BASE_URL","checkAuthStatus","token","localStorage","getItem","console","log","fetchUserProfile","response","fetch","headers","ok","data","json","refreshToken","logout","method","body","JSON","stringify","setItem","accessToken","login","email","password","success","errorMessage","register","username","confirmPassword","removeItem","updateProfile","profileData","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ALL projects/Skillazon/skillazon/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const API_BASE_URL = 'http://localhost:3003/api/auth';\r\n\r\n  // Check if user is logged in on app start\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const token = localStorage.getItem('accessToken');\r\n      if (token) {\r\n        console.log('Token found in localStorage, fetching user profile...');\r\n        await fetchUserProfile();\r\n      } else {\r\n        console.log('No token found in localStorage');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkAuthStatus();\r\n  }, []); // Remove fetchUserProfile dependency to avoid infinite loop\r\n\r\n  const fetchUserProfile = async () => {\r\n    try {\r\n      const token = localStorage.getItem('accessToken');\r\n      if (!token) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`${API_BASE_URL}/profile`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUser(data.user);\r\n      } else {\r\n        // Token might be expired, try to refresh\r\n        await refreshToken();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshToken = async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      if (!refreshToken) {\r\n        logout();\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`${API_BASE_URL}/refresh`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ refreshToken })\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('accessToken', data.accessToken);\r\n        await fetchUserProfile();\r\n      } else {\r\n        logout();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing token:', error);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      const response = await fetch(`${API_BASE_URL}/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        localStorage.setItem('accessToken', data.accessToken);\r\n        localStorage.setItem('refreshToken', data.refreshToken);\r\n        setUser(data.user);\r\n        return { success: true };\r\n      } else {\r\n        setError(data.error);\r\n        return { success: false, error: data.error };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = 'Network error. Please try again.';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password, confirmPassword) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      const response = await fetch(`${API_BASE_URL}/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ username, email, password, confirmPassword })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        localStorage.setItem('accessToken', data.accessToken);\r\n        localStorage.setItem('refreshToken', data.refreshToken);\r\n        setUser(data.user);\r\n        return { success: true };\r\n      } else {\r\n        setError(data.error);\r\n        return { success: false, error: data.error };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = 'Network error. Please try again.';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      if (refreshToken) {\r\n        await fetch(`${API_BASE_URL}/logout`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ refreshToken })\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n    } finally {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('refreshToken');\r\n      setUser(null);\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      setError(null);\r\n      const token = localStorage.getItem('accessToken');\r\n\r\n      const response = await fetch(`${API_BASE_URL}/profile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(profileData)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setUser(data.user);\r\n        return { success: true };\r\n      } else {\r\n        setError(data.error);\r\n        return { success: false, error: data.error };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = 'Network error. Please try again.';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    refreshToken,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}